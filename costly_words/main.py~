prime = 1000000007
class Modulo:
    
    def __init__(self, p):
        self.p = p

    def product(self, numbers):
        sanitized = [x % self.p for x in numbers]
        answer = 1
        for s in sanitized:
            answer = (answer * s) % (self.p)
        return answer

    def sum(self, numbers):
        sanitized = [x % self.p for x in numbers]
        answer = 0
        for s in sanitized:
            answer = (answer + s) % (self.p)
        return answer

    def exponent(self, base, exponent):
        a = base % self.p
        b = exponent % (self.p - 1)
        if b == 0:
            return 1
        if a == 0:
            return 0
        if a == 1:
            return 1
        if b == 1:
            return (a % self.p)
        if b == 2:
            return ((a*a) % self.p)
        if b % 2 == 0:
            temp = self.exponent(a, b/2)
            return ((temp * temp) % self.p)
        else:
            temp = self.exponent(a, b/2)
            return ((temp * temp * a) % self.p)

mod = Modulo(prime)
d = int(raw_input())
a = [int(x) for x in raw_input().split(' ')]
t = int(raw_input())
def total_count(n, m):
    
answers = []
for test in range(t):
    [n, m] = [int(x) for x in raw_input().split(' ')]
    answers.append(total_count(n, m)
for answer in answers:
    print answer    
    
